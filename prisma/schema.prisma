generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  userType      UserType  @default(User)
  userStatus    Int       @default(0)
  currentJobId  String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currentJob     Job?      @relation(fields: [currentJobId], references: [id])
  trainImageSet TrainImageSet[]
  sessions       Session[]
  accounts       Account[]

}

model Job {
  id        String @id
  status    String
  user      User?                  
}

model TrainImageSet {
  id         Int          @id @default(autoincrement())
  userId     String
  folderPath String       @unique
  zipPath    String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
  petClass   String
  petName    String
  trainImages TrainImage[]
  lora       Lora?  
}

model TrainImage {
  id           Int            @id @default(autoincrement())
  setId        Int
  filePath     String
  trainImageSet TrainImageSet @relation(fields: [setId], references: [id])
}


model Lora {
  id              Int            @id @default(autoincrement())
  trainImageSetId Int            @unique
  path            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  trainImageSet   TrainImageSet  @relation(fields: [trainImageSetId], references: [id])
  genImages       GenImage[]
}

model GenImage {
  id         Int      @id @default(autoincrement())
  loraId     Int
  filePath   String
  createdAt  DateTime @default(now())
  lora       Lora     @relation(fields: [loraId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  User
  Admin
}

