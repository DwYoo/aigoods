// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?
  refreshTokenExpiresIn   Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserType {
  User
  Admin
}

model User {
  id             String         @id @default(uuid())
  name           String?
  email          String?        @unique
  image          String?
  userType       UserType?      // UserType에 대한 정의
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  trainImageSets TrainImageSet[]
  sessions       Session[]
  accounts       Account[]
}

model TrainImageSet {
  id         Int          @id @default(autoincrement())
  userId     String
  folderPath String
  zipPath    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
  trainImages TrainImage[]
  lora       Lora?  
}

model TrainImage {
  id           Int            @id @default(autoincrement())
  setId        Int
  filePath     String
  trainImageSet TrainImageSet @relation(fields: [setId], references: [id])
}

model Lora {
  id              Int            @id @default(autoincrement())
  trainImageSetId Int            @unique
  path            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  trainImageSet   TrainImageSet  @relation(fields: [trainImageSetId], references: [id])
  genImages       GenImage[]
}

model GenImage {
  id         Int      @id @default(autoincrement())
  loraId     Int
  filePath   String
  createdAt  DateTime @default(now())
  lora       Lora     @relation(fields: [loraId], references: [id])
}